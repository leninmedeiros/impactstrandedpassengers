; IMPACT - Stranded Passengers Model
; CODE By Lenin Medeiros & Natalie van der Wal
; Vrije Universiteit Amsterdam
; April, 2017

; Size of the real map: 64m x 24m.
; 1 patch = 0.5 meter.
; World settings: max-pxcor 136 and max-pycor 56.
to draw-scenario
  init-scenario-variables
  draw-borders
  draw-entrance
  draw-gates
  draw-restaurants
  draw-pillars
  draw-toilets
  draw-information-desks
  draw-seats
end

to init-scenario-variables
  set gates_positions [
    [14 2] [26 2] [78 2] [98 2] [116 2] [134 26] [35 54] [47 54] [89 54] [116 54]
  ]
  set restaurants_positions [ [12 45] [128 11]]
  set pillars_positions [ [104 45] [66 45] ]
  set information_desks_positions [ [11 3] [23 3] [75 3] [95 3] [113 3] [133 29] [119 53] [92 53] [50 53] [38 53] ]
  set seats_positions_1 [
    [6.3 7] [6.3 7.7] [6.3 8.4] [6.3 9.1] [6.3 9.8] [6.3 10.5] [6.3 11.2] [6.3 11.9] [6.3 12.6] [6.3 13.3] [6.3 14] [6.3 14.7] [6.3 15.4] [6.3 16.1] [6.3 16.8] [6.3 17.5] [6.3 18.2] [6.3 18.9] [6.3 19.6] [6.3 20.3]
    [7 7] [7 7.7] [7 8.4] [7 9.1] [7 9.8] [7 10.5] [7 11.2] [7 11.9] [7 12.6] [7 13.3] [7 14] [7 14.7] [7 15.4] [7 16.1] [7 16.8] [7 17.5] [7 18.2] [7 18.9] [7 19.6] [7 20.3]
    [10 7] [10 7.7] [10 8.4] [10 9.1] [10 9.8] [10 10.5] [10 11.2] [10 11.9] [10 12.6] [10 13.3] [10 14] [10 14.7] [10 15.4] [10 16.1] [10 16.8] [10 17.5] [10 18.2] [10 18.9] [10 19.6] [10 20.3]
    [10.7 7] [10.7 7.7] [10.7 8.4] [10.7 9.1] [10.7 9.8] [10.7 10.5] [10.7 11.2] [10.7 11.9] [10.7 12.6] [10.7 13.3] [10.7 14] [10.7 14.7] [10.7 15.4] [10.7 16.1] [10.7 16.8] [10.7 17.5] [10.7 18.2] [10.7 18.9] [10.7 19.6] [10.7 20.3]
    [13.7 7] [13.7 7.7] [13.7 8.4] [13.7 9.1] [13.7 9.8] [13.7 10.5] [13.7 11.2] [13.7 11.9] [13.7 12.6] [13.7 13.3] [13.7 14] [13.7 14.7] [13.7 15.4] [13.7 16.1] [13.7 16.8] [13.7 17.5] [13.7 18.2] [13.7 18.9] [13.7 19.6] [13.7 20.3]
    [14.4 7] [14.4 7.7] [14.4 8.4] [14.4 9.1] [14.4 9.8] [14.4 10.5] [14.4 11.2] [14.4 11.9] [14.4 12.6] [14.4 13.3] [14.4 14] [14.4 14.7] [14.4 15.4] [14.4 16.1] [14.4 16.8] [14.4 17.5] [14.4 18.2] [14.4 18.9] [14.4 19.6] [14.4 20.3]
    [17.4 7] [17.4 7.7] [17.4 8.4] [17.4 9.1] [17.4 9.8] [17.4 10.5] [17.4 11.2] [17.4 11.9] [17.4 12.6] [17.4 13.3] [17.4 14] [17.4 14.7] [17.4 15.4] [17.4 16.1] [17.4 16.8] [17.4 17.5] [17.4 18.2] [17.4 18.9] [17.4 19.6] [17.4 20.3]
    [18.1 7] [18.1 7.7] [18.1 8.4] [18.1 9.1] [18.1 9.8] [18.1 10.5] [18.1 11.2] [18.1 11.9] [18.1 12.6] [18.1 13.3] [18.1 14] [18.1 14.7] [18.1 15.4] [18.1 16.1] [18.1 16.8] [18.1 17.5] [18.1 18.2] [18.1 18.9] [18.1 19.6] [18.1 20.3]
    [21.1 7] [21.1 7.7] [21.1 8.4] [21.1 9.1] [21.1 9.8] [21.1 10.5] [21.1 11.2] [21.1 11.9] [21.1 12.6] [21.1 13.3] [21.1 14] [21.1 14.7] [21.1 15.4] [21.1 16.1] [21.1 16.8] [21.1 17.5] [21.1 18.2] [21.1 18.9] [21.1 19.6] [21.1 20.3]
    [21.8 7] [21.8 7.7] [21.8 8.4] [21.8 9.1] [21.8 9.8] [21.8 10.5] [21.8 11.2] [21.8 11.9] [21.8 12.6] [21.8 13.3] [21.8 14] [21.8 14.7] [21.8 15.4] [21.8 16.1] [21.8 16.8] [21.8 17.5] [21.8 18.2] [21.8 18.9] [21.8 19.6] [21.8 20.3]
    [24.8 7] [24.8 7.7] [24.8 8.4] [24.8 9.1] [24.8 9.8] [24.8 10.5] [24.8 11.2] [24.8 11.9] [24.8 12.6] [24.8 13.3] [24.8 14] [24.8 14.7] [24.8 15.4] [24.8 16.1] [24.8 16.8] [24.8 17.5] [24.8 18.2] [24.8 18.9] [24.8 19.6] [24.8 20.3]
    [25.5 7] [25.5 7.7] [25.5 8.4] [25.5 9.1] [25.5 9.8] [25.5 10.5] [25.5 11.2] [25.5 11.9] [25.5 12.6] [25.5 13.3] [25.5 14] [25.5 14.7] [25.5 15.4] [25.5 16.1] [25.5 16.8] [25.5 17.5] [25.5 18.2] [25.5 18.9] [25.5 19.6] [25.5 20.3]
    [28.5 7] [28.5 7.7] [28.5 8.4] [28.5 9.1] [28.5 9.8] [28.5 10.5] [28.5 11.2] [28.5 11.9] [28.5 12.6] [28.5 13.3] [28.5 14] [28.5 14.7] [28.5 15.4] [28.5 16.1] [28.5 16.8] [28.5 17.5] [28.5 18.2] [28.5 18.9] [28.5 19.6] [28.5 20.3]
    [29.2 7] [29.2 7.7] [29.2 8.4] [29.2 9.1] [29.2 9.8] [29.2 10.5] [29.2 11.2] [29.2 11.9] [29.2 12.6] [29.2 13.3] [29.2 14] [29.2 14.7] [29.2 15.4] [29.2 16.1] [29.2 16.8] [29.2 17.5] [29.2 18.2] [29.2 18.9] [29.2 19.6] [29.2 20.3]
    [32.2 7] [32.2 7.7] [32.2 8.4] [32.2 9.1] [32.2 9.8] [32.2 10.5] [32.2 11.2] [32.2 11.9] [32.2 12.6] [32.2 13.3] [32.2 14] [32.2 14.7] [32.2 15.4] [32.2 16.1] [32.2 16.8] [32.2 17.5] [32.2 18.2] [32.2 18.9] [32.2 19.6] [32.2 20.3]
    [32.9 7] [32.9 7.7] [32.9 8.4] [32.9 9.1] [32.9 9.8] [32.9 10.5] [32.9 11.2] [32.9 11.9] [32.9 12.6] [32.9 13.3] [32.9 14] [32.9 14.7] [32.9 15.4] [32.9 16.1] [32.9 16.8] [32.9 17.5] [32.9 18.2] [32.9 18.9] [32.9 19.6] [32.9 20.3]
    [35.9 7] [35.9 7.7] [35.9 8.4] [35.9 9.1] [35.9 9.8] [35.9 10.5] [35.9 11.2] [35.9 11.9] [35.9 12.6] [35.9 13.3] [35.9 14] [35.9 14.7] [35.9 15.4] [35.9 16.1] [35.9 16.8] [35.9 17.5] [35.9 18.2] [35.9 18.9] [35.9 19.6] [35.9 20.3]
    [36.6 7] [36.6 7.7] [36.6 8.4] [36.6 9.1] [36.6 9.8] [36.6 10.5] [36.6 11.2] [36.6 11.9] [36.6 12.6] [36.6 13.3] [36.6 14] [36.6 14.7] [36.6 15.4] [36.6 16.1] [36.6 16.8] [36.6 17.5] [36.6 18.2] [36.6 18.9] [36.6 19.6] [36.6 20.3]
    [39.6 7] [39.6 7.7] [39.6 8.4] [39.6 9.1] [39.6 9.8] [39.6 10.5] [39.6 11.2] [39.6 11.9] [39.6 12.6] [39.6 13.3] [39.6 14] [39.6 14.7] [39.6 15.4] [39.6 16.1] [39.6 16.8] [39.6 17.5] [39.6 18.2] [39.6 18.9] [39.6 19.6] [39.6 20.3]
    [40.3 7] [40.3 7.7] [40.3 8.4] [40.3 9.1] [40.3 9.8] [40.3 10.5] [40.3 11.2] [40.3 11.9] [40.3 12.6] [40.3 13.3] [40.3 14] [40.3 14.7] [40.3 15.4] [40.3 16.1] [40.3 16.8] [40.3 17.5] [40.3 18.2] [40.3 18.9] [40.3 19.6] [40.3 20.3]
    [71 7] [71 7.7] [71 8.4] [71 9.1] [71 9.8] [71 10.5] [71 11.2] [71 11.9] [71 12.6] [71 13.3] [71 14] [71 14.7] [71 15.4] [71 16.1] [71 16.8] [71 17.5] [71 18.2] [71 18.9] [71 19.6] [71 20.3]
    [71.7 7] [71.7 7.7] [71.7 8.4] [71.7 9.1] [71.7 9.8] [71.7 10.5] [71.7 11.2] [71.7 11.9] [71.7 12.6] [71.7 13.3] [71.7 14] [71.7 14.7] [71.7 15.4] [71.7 16.1] [71.7 16.8] [71.7 17.5] [71.7 18.2] [71.7 18.9] [71.7 19.6] [71.7 20.3]
    [74.7 7] [74.7 7.7] [74.7 8.4] [74.7 9.1] [74.7 9.8] [74.7 10.5] [74.7 11.2] [74.7 11.9] [74.7 12.6] [74.7 13.3] [74.7 14] [74.7 14.7] [74.7 15.4] [74.7 16.1] [74.7 16.8] [74.7 17.5] [74.7 18.2] [74.7 18.9] [74.7 19.6] [74.7 20.3]
    [75.4 7] [75.4 7.7] [75.4 8.4] [75.4 9.1] [75.4 9.8] [75.4 10.5] [75.4 11.2] [75.4 11.9] [75.4 12.6] [75.4 13.3] [75.4 14] [75.4 14.7] [75.4 15.4] [75.4 16.1] [75.4 16.8] [75.4 17.5] [75.4 18.2] [75.4 18.9] [75.4 19.6] [75.4 20.3]
    [78.4 7] [78.4 7.7] [78.4 8.4] [78.4 9.1] [78.4 9.8] [78.4 10.5] [78.4 11.2] [78.4 11.9] [78.4 12.6] [78.4 13.3] [78.4 14] [78.4 14.7] [78.4 15.4] [78.4 16.1] [78.4 16.8] [78.4 17.5] [78.4 18.2] [78.4 18.9] [78.4 19.6] [78.4 20.3]
    [79.1 7] [79.1 7.7] [79.1 8.4] [79.1 9.1] [79.1 9.8] [79.1 10.5] [79.1 11.2] [79.1 11.9] [79.1 12.6] [79.1 13.3] [79.1 14] [79.1 14.7] [79.1 15.4] [79.1 16.1] [79.1 16.8] [79.1 17.5] [79.1 18.2] [79.1 18.9] [79.1 19.6] [79.1 20.3]
    [82.1 7] [82.1 7.7] [82.1 8.4] [82.1 9.1] [82.1 9.8] [82.1 10.5] [82.1 11.2] [82.1 11.9] [82.1 12.6] [82.1 13.3] [82.1 14] [82.1 14.7] [82.1 15.4] [82.1 16.1] [82.1 16.8] [82.1 17.5] [82.1 18.2] [82.1 18.9] [82.1 19.6] [82.1 20.3]
    [82.8 7] [82.8 7.7] [82.8 8.4] [82.8 9.1] [82.8 9.8] [82.8 10.5] [82.8 11.2] [82.8 11.9] [82.8 12.6] [82.8 13.3] [82.8 14] [82.8 14.7] [82.8 15.4] [82.8 16.1] [82.8 16.8] [82.8 17.5] [82.8 18.2] [82.8 18.9] [82.8 19.6] [82.8 20.3]
    [85.8 7] [85.8 7.7] [85.8 8.4] [85.8 9.1] [85.8 9.8] [85.8 10.5] [85.8 11.2] [85.8 11.9] [85.8 12.6] [85.8 13.3] [85.8 14] [85.8 14.7] [85.8 15.4] [85.8 16.1] [85.8 16.8] [85.8 17.5] [85.8 18.2] [85.8 18.9] [85.8 19.6] [85.8 20.3]
    [86.5 7] [86.5 7.7] [86.5 8.4] [86.5 9.1] [86.5 9.8] [86.5 10.5] [86.5 11.2] [86.5 11.9] [86.5 12.6] [86.5 13.3] [86.5 14] [86.5 14.7] [86.5 15.4] [86.5 16.1] [86.5 16.8] [86.5 17.5] [86.5 18.2] [86.5 18.9] [86.5 19.6] [86.5 20.3]
    [89.5 7] [89.5 7.7] [89.5 8.4] [89.5 9.1] [89.5 9.8] [89.5 10.5] [89.5 11.2] [89.5 11.9] [89.5 12.6] [89.5 13.3] [89.5 14] [89.5 14.7] [89.5 15.4] [89.5 16.1] [89.5 16.8] [89.5 17.5] [89.5 18.2] [89.5 18.9] [89.5 19.6] [89.5 20.3]
    [90.2 7] [90.2 7.7] [90.2 8.4] [90.2 9.1] [90.2 9.8] [90.2 10.5] [90.2 11.2] [90.2 11.9] [90.2 12.6] [90.2 13.3] [90.2 14] [90.2 14.7] [90.2 15.4] [90.2 16.1] [90.2 16.8] [90.2 17.5] [90.2 18.2] [90.2 18.9] [90.2 19.6] [90.2 20.3]
    [93.2 7] [93.2 7.7] [93.2 8.4] [93.2 9.1] [93.2 9.8] [93.2 10.5] [93.2 11.2] [93.2 11.9] [93.2 12.6] [93.2 13.3] [93.2 14] [93.2 14.7] [93.2 15.4] [93.2 16.1] [93.2 16.8] [93.2 17.5] [93.2 18.2] [93.2 18.9] [93.2 19.6] [93.2 20.3]
    [93.9 7] [93.9 7.7] [93.9 8.4] [93.9 9.1] [93.9 9.8] [93.9 10.5] [93.9 11.2] [93.9 11.9] [93.9 12.6] [93.9 13.3] [93.9 14] [93.9 14.7] [93.9 15.4] [93.9 16.1] [93.9 16.8] [93.9 17.5] [93.9 18.2] [93.9 18.9] [93.9 19.6] [93.9 20.3]
    [96.9 7] [96.9 7.7] [96.9 8.4] [96.9 9.1] [96.9 9.8] [96.9 10.5] [96.9 11.2] [96.9 11.9] [96.9 12.6] [96.9 13.3] [96.9 14] [96.9 14.7] [96.9 15.4] [96.9 16.1] [96.9 16.8] [96.9 17.5] [96.9 18.2] [96.9 18.9] [96.9 19.6] [96.9 20.3]
    [97.6 7] [97.6 7.7] [97.6 8.4] [97.6 9.1] [97.6 9.8] [97.6 10.5] [97.6 11.2] [97.6 11.9] [97.6 12.6] [97.6 13.3] [97.6 14] [97.6 14.7] [97.6 15.4] [97.6 16.1] [97.6 16.8] [97.6 17.5] [97.6 18.2] [97.6 18.9] [97.6 19.6] [97.6 20.3]
    [100.6 7] [100.6 7.7] [100.6 8.4] [100.6 9.1] [100.6 9.8] [100.6 10.5] [100.6 11.2] [100.6 11.9] [100.6 12.6] [100.6 13.3] [100.6 14] [100.6 14.7] [100.6 15.4] [100.6 16.1] [100.6 16.8] [100.6 17.5] [100.6 18.2] [100.6 18.9] [100.6 19.6] [100.6 20.3]
    [101.3 7] [101.3 7.7] [101.3 8.4] [101.3 9.1] [101.3 9.8] [101.3 10.5] [101.3 11.2] [101.3 11.9] [101.3 12.6] [101.3 13.3] [101.3 14] [101.3 14.7] [101.3 15.4] [101.3 16.1] [101.3 16.8] [101.3 17.5] [101.3 18.2] [101.3 18.9] [101.3 19.6] [101.3 20.3]
    [104.3 7] [104.3 7.7] [104.3 8.4] [104.3 9.1] [104.3 9.8] [104.3 10.5] [104.3 11.2] [104.3 11.9] [104.3 12.6] [104.3 13.3] [104.3 14] [104.3 14.7] [104.3 15.4] [104.3 16.1] [104.3 16.8] [104.3 17.5] [104.3 18.2] [104.3 18.9] [104.3 19.6] [104.3 20.3]
    [105 7] [105 7.7] [105 8.4] [105 9.1] [105 9.8] [105 10.5] [105 11.2] [105 11.9] [105 12.6] [105 13.3] [105 14] [105 14.7] [105 15.4] [105 16.1] [105 16.8] [105 17.5] [105 18.2] [105 18.9] [105 19.6] [105 20.3]
    [108 7] [108 7.7] [108 8.4] [108 9.1] [108 9.8] [108 10.5] [108 11.2] [108 11.9] [108 12.6] [108 13.3] [108 14] [108 14.7] [108 15.4] [108 16.1] [108 16.8] [108 17.5] [108 18.2] [108 18.9] [108 19.6] [108 20.3]
    [108.7 7] [108.7 7.7] [108.7 8.4] [108.7 9.1] [108.7 9.8] [108.7 10.5] [108.7 11.2] [108.7 11.9] [108.7 12.6] [108.7 13.3] [108.7 14] [108.7 14.7] [108.7 15.4] [108.7 16.1] [108.7 16.8] [108.7 17.5] [108.7 18.2] [108.7 18.9] [108.7 19.6] [108.7 20.3]
    [111.7 7] [111.7 7.7] [111.7 8.4] [111.7 9.1] [111.7 9.8] [111.7 10.5] [111.7 11.2] [111.7 11.9] [111.7 12.6] [111.7 13.3] [111.7 14] [111.7 14.7] [111.7 15.4] [111.7 16.1] [111.7 16.8] [111.7 17.5] [111.7 18.2] [111.7 18.9] [111.7 19.6] [111.7 20.3]
    [112.4 7] [112.4 7.7] [112.4 8.4] [112.4 9.1] [112.4 9.8] [112.4 10.5] [112.4 11.2] [112.4 11.9] [112.4 12.6] [112.4 13.3] [112.4 14] [112.4 14.7] [112.4 15.4] [112.4 16.1] [112.4 16.8] [112.4 17.5] [112.4 18.2] [112.4 18.9] [112.4 19.6] [112.4 20.3]
    [115.4 7] [115.4 7.7] [115.4 8.4] [115.4 9.1] [115.4 9.8] [115.4 10.5] [115.4 11.2] [115.4 11.9] [115.4 12.6] [115.4 13.3] [115.4 14] [115.4 14.7] [115.4 15.4] [115.4 16.1] [115.4 16.8] [115.4 17.5] [115.4 18.2] [115.4 18.9] [115.4 19.6] [115.4 20.3]
    [116.1 7] [116.1 7.7] [116.1 8.4] [116.1 9.1] [116.1 9.8] [116.1 10.5] [116.1 11.2] [116.1 11.9] [116.1 12.6] [116.1 13.3] [116.1 14] [116.1 14.7] [116.1 15.4] [116.1 16.1] [116.1 16.8] [116.1 17.5] [116.1 18.2] [116.1 18.9] [116.1 19.6] [116.1 20.3]
    [119.1 7] [119.1 7.7] [119.1 8.4] [119.1 9.1] [119.1 9.8] [119.1 10.5] [119.1 11.2] [119.1 11.9] [119.1 12.6] [119.1 13.3] [119.1 14] [119.1 14.7] [119.1 15.4] [119.1 16.1] [119.1 16.8] [119.1 17.5] [119.1 18.2] [119.1 18.9] [119.1 19.6] [119.1 20.3]
    [119.8 7] [119.8 7.7] [119.8 8.4] [119.8 9.1] [119.8 9.8] [119.8 10.5] [119.8 11.2] [119.8 11.9] [119.8 12.6] [119.8 13.3] [119.8 14] [119.8 14.7] [119.8 15.4] [119.8 16.1] [119.8 16.8] [119.8 17.5] [119.8 18.2] [119.8 18.9] [119.8 19.6] [119.8 20.3]
    [109 49.3] [109 48.6] [109 47.9] [109 47.2] [109 46.5] [109 45.8] [109 45.1] [109 44.4] [109 43.7] [109 43] [109 42.3] [109 41.6] [109 40.9] [109 40.2] [109 39.5] [109 38.8] [109 38.1] [109 37.4] [109 36.7] [109 36]
    [109.7 49.3] [109.7 48.6] [109.7 47.9] [109.7 47.2] [109.7 46.5] [109.7 45.8] [109.7 45.1] [109.7 44.4] [109.7 43.7] [109.7 43] [109.7 42.3] [109.7 41.6] [109.7 40.9] [109.7 40.2] [109.7 39.5] [109.7 38.8] [109.7 38.1] [109.7 37.4] [109.7 36.7] [109.7 36]
    [112.7 49.3] [112.7 48.6] [112.7 47.9] [112.7 47.2] [112.7 46.5] [112.7 45.8] [112.7 45.1] [112.7 44.4] [112.7 43.7] [112.7 43] [112.7 42.3] [112.7 41.6] [112.7 40.9] [112.7 40.2] [112.7 39.5] [112.7 38.8] [112.7 38.1] [112.7 37.4] [112.7 36.7] [112.7 36]
    [113.4 49.3] [113.4 48.6] [113.4 47.9] [113.4 47.2] [113.4 46.5] [113.4 45.8] [113.4 45.1] [113.4 44.4] [113.4 43.7] [113.4 43] [113.4 42.3] [113.4 41.6] [113.4 40.9] [113.4 40.2] [113.4 39.5] [113.4 38.8] [113.4 38.1] [113.4 37.4] [113.4 36.7] [113.4 36]
    [116.4 49.3] [116.4 48.6] [116.4 47.9] [116.4 47.2] [116.4 46.5] [116.4 45.8] [116.4 45.1] [116.4 44.4] [116.4 43.7] [116.4 43] [116.4 42.3] [116.4 41.6] [116.4 40.9] [116.4 40.2] [116.4 39.5] [116.4 38.8] [116.4 38.1] [116.4 37.4] [116.4 36.7] [116.4 36]
    [117.1 49.3] [117.1 48.6] [117.1 47.9] [117.1 47.2] [117.1 46.5] [117.1 45.8] [117.1 45.1] [117.1 44.4] [117.1 43.7] [117.1 43] [117.1 42.3] [117.1 41.6] [117.1 40.9] [117.1 40.2] [117.1 39.5] [117.1 38.8] [117.1 38.1] [117.1 37.4] [117.1 36.7] [117.1 36]
    [120.1 49.3] [120.1 48.6] [120.1 47.9] [120.1 47.2] [120.1 46.5] [120.1 45.8] [120.1 45.1] [120.1 44.4] [120.1 43.7] [120.1 43] [120.1 42.3] [120.1 41.6] [120.1 40.9] [120.1 40.2] [120.1 39.5] [120.1 38.8] [120.1 38.1] [120.1 37.4] [120.1 36.7] [120.1 36]
    [120.8 49.3] [120.8 48.6] [120.8 47.9] [120.8 47.2] [120.8 46.5] [120.8 45.8] [120.8 45.1] [120.8 44.4] [120.8 43.7] [120.8 43] [120.8 42.3] [120.8 41.6] [120.8 40.9] [120.8 40.2] [120.8 39.5] [120.8 38.8] [120.8 38.1] [120.8 37.4] [120.8 36.7] [120.8 36]
    [123.8 49.3] [123.8 48.6] [123.8 47.9] [123.8 47.2] [123.8 46.5] [123.8 45.8] [123.8 45.1] [123.8 44.4] [123.8 43.7] [123.8 43] [123.8 42.3] [123.8 41.6] [123.8 40.9] [123.8 40.2] [123.8 39.5] [123.8 38.8] [123.8 38.1] [123.8 37.4] [123.8 36.7] [123.8 36]
    [124.5 49.3] [124.5 48.6] [124.5 47.9] [124.5 47.2] [124.5 46.5] [124.5 45.8] [124.5 45.1] [124.5 44.4] [124.5 43.7] [124.5 43] [124.5 42.3] [124.5 41.6] [124.5 40.9] [124.5 40.2] [124.5 39.5] [124.5 38.8] [124.5 38.1] [124.5 37.4] [124.5 36.7] [124.5 36]
    [127.5 49.3] [127.5 48.6] [127.5 47.9] [127.5 47.2] [127.5 46.5] [127.5 45.8] [127.5 45.1] [127.5 44.4] [127.5 43.7] [127.5 43] [127.5 42.3] [127.5 41.6] [127.5 40.9] [127.5 40.2] [127.5 39.5] [127.5 38.8] [127.5 38.1] [127.5 37.4] [127.5 36.7] [127.5 36]
    [128.2 49.3] [128.2 48.6] [128.2 47.9] [128.2 47.2] [128.2 46.5] [128.2 45.8] [128.2 45.1] [128.2 44.4] [128.2 43.7] [128.2 43] [128.2 42.3] [128.2 41.6] [128.2 40.9] [128.2 40.2] [128.2 39.5] [128.2 38.8] [128.2 38.1] [128.2 37.4] [128.2 36.7] [128.2 36]
    [131.2 49.3] [131.2 48.6] [131.2 47.9] [131.2 47.2] [131.2 46.5] [131.2 45.8] [131.2 45.1] [131.2 44.4] [131.2 43.7] [131.2 43] [131.2 42.3] [131.2 41.6] [131.2 40.9] [131.2 40.2] [131.2 39.5] [131.2 38.8] [131.2 38.1] [131.2 37.4] [131.2 36.7] [131.2 36]
    [131.9 49.3] [131.9 48.6] [131.9 47.9] [131.9 47.2] [131.9 46.5] [131.9 45.8] [131.9 45.1] [131.9 44.4] [131.9 43.7] [131.9 43] [131.9 42.3] [131.9 41.6] [131.9 40.9] [131.9 40.2] [131.9 39.5] [131.9 38.8] [131.9 38.1] [131.9 37.4] [131.9 36.7] [131.9 36]
    [89 49.3] [89 48.6] [89 47.9] [89 47.2] [89 46.5] [89 45.8] [89 45.1] [89 44.4] [89 43.7] [89 43] [89 42.3] [89 41.6] [89 40.9] [89 40.2] [89 39.5] [89 38.8] [89 38.1] [89 37.4] [89 36.7] [89 36]
    [89.7 49.3] [89.7 48.6] [89.7 47.9] [89.7 47.2] [89.7 46.5] [89.7 45.8] [89.7 45.1] [89.7 44.4] [89.7 43.7] [89.7 43] [89.7 42.3] [89.7 41.6] [89.7 40.9] [89.7 40.2] [89.7 39.5] [89.7 38.8] [89.7 38.1] [89.7 37.4] [89.7 36.7] [89.7 36]
    [92.7 49.3] [92.7 48.6] [92.7 47.9] [92.7 47.2] [92.7 46.5] [92.7 45.8] [92.7 45.1] [92.7 44.4] [92.7 43.7] [92.7 43] [92.7 42.3] [92.7 41.6] [92.7 40.9] [92.7 40.2] [92.7 39.5] [92.7 38.8] [92.7 38.1] [92.7 37.4] [92.7 36.7] [92.7 36]
    [93.4 49.3] [93.4 48.6] [93.4 47.9] [93.4 47.2] [93.4 46.5] [93.4 45.8] [93.4 45.1] [93.4 44.4] [93.4 43.7] [93.4 43] [93.4 42.3] [93.4 41.6] [93.4 40.9] [93.4 40.2] [93.4 39.5] [93.4 38.8] [93.4 38.1] [93.4 37.4] [93.4 36.7] [93.4 36]
    [96.4 49.3] [96.4 48.6] [96.4 47.9] [96.4 47.2] [96.4 46.5] [96.4 45.8] [96.4 45.1] [96.4 44.4] [96.4 43.7] [96.4 43] [96.4 42.3] [96.4 41.6] [96.4 40.9] [96.4 40.2] [96.4 39.5] [96.4 38.8] [96.4 38.1] [96.4 37.4] [96.4 36.7] [96.4 36]
    [97.1 49.3] [97.1 48.6] [97.1 47.9] [97.1 47.2] [97.1 46.5] [97.1 45.8] [97.1 45.1] [97.1 44.4] [97.1 43.7] [97.1 43] [97.1 42.3] [97.1 41.6] [97.1 40.9] [97.1 40.2] [97.1 39.5] [97.1 38.8] [97.1 38.1] [97.1 37.4] [97.1 36.7] [97.1 36]
    [29 49.3] [29 48.6] [29 47.9] [29 47.2] [29 46.5] [29 45.8] [29 45.1] [29 44.4] [29 43.7] [29 43] [29 42.3] [29 41.6] [29 40.9] [29 40.2] [29 39.5] [29 38.8] [29 38.1] [29 37.4] [29 36.7] [29 36]
    [29.7 49.3] [29.7 48.6] [29.7 47.9] [29.7 47.2] [29.7 46.5] [29.7 45.8] [29.7 45.1] [29.7 44.4] [29.7 43.7] [29.7 43] [29.7 42.3] [29.7 41.6] [29.7 40.9] [29.7 40.2] [29.7 39.5] [29.7 38.8] [29.7 38.1] [29.7 37.4] [29.7 36.7] [29.7 36]
    [32.7 49.3] [32.7 48.6] [32.7 47.9] [32.7 47.2] [32.7 46.5] [32.7 45.8] [32.7 45.1] [32.7 44.4] [32.7 43.7] [32.7 43] [32.7 42.3] [32.7 41.6] [32.7 40.9] [32.7 40.2] [32.7 39.5] [32.7 38.8] [32.7 38.1] [32.7 37.4] [32.7 36.7] [32.7 36]
    [33.4 49.3] [33.4 48.6] [33.4 47.9] [33.4 47.2] [33.4 46.5] [33.4 45.8] [33.4 45.1] [33.4 44.4] [33.4 43.7] [33.4 43] [33.4 42.3] [33.4 41.6] [33.4 40.9] [33.4 40.2] [33.4 39.5] [33.4 38.8] [33.4 38.1] [33.4 37.4] [33.4 36.7] [33.4 36]
    [36.4 49.3] [36.4 48.6] [36.4 47.9] [36.4 47.2] [36.4 46.5] [36.4 45.8] [36.4 45.1] [36.4 44.4] [36.4 43.7] [36.4 43] [36.4 42.3] [36.4 41.6] [36.4 40.9] [36.4 40.2] [36.4 39.5] [36.4 38.8] [36.4 38.1] [36.4 37.4] [36.4 36.7] [36.4 36]
    [37.1 49.3] [37.1 48.6] [37.1 47.9] [37.1 47.2] [37.1 46.5] [37.1 45.8] [37.1 45.1] [37.1 44.4] [37.1 43.7] [37.1 43] [37.1 42.3] [37.1 41.6] [37.1 40.9] [37.1 40.2] [37.1 39.5] [37.1 38.8] [37.1 38.1] [37.1 37.4] [37.1 36.7] [37.1 36]
    [40.1 49.3] [40.1 48.6] [40.1 47.9] [40.1 47.2] [40.1 46.5] [40.1 45.8] [40.1 45.1] [40.1 44.4] [40.1 43.7] [40.1 43] [40.1 42.3] [40.1 41.6] [40.1 40.9] [40.1 40.2] [40.1 39.5] [40.1 38.8] [40.1 38.1] [40.1 37.4] [40.1 36.7] [40.1 36]
    [40.8 49.3] [40.8 48.6] [40.8 47.9] [40.8 47.2] [40.8 46.5] [40.8 45.8] [40.8 45.1] [40.8 44.4] [40.8 43.7] [40.8 43] [40.8 42.3] [40.8 41.6] [40.8 40.9] [40.8 40.2] [40.8 39.5] [40.8 38.8] [40.8 38.1] [40.8 37.4] [40.8 36.7] [40.8 36]
    [43.8 49.3] [43.8 48.6] [43.8 47.9] [43.8 47.2] [43.8 46.5] [43.8 45.8] [43.8 45.1] [43.8 44.4] [43.8 43.7] [43.8 43] [43.8 42.3] [43.8 41.6] [43.8 40.9] [43.8 40.2] [43.8 39.5] [43.8 38.8] [43.8 38.1] [43.8 37.4] [43.8 36.7] [43.8 36]
    [44.5 49.3] [44.5 48.6] [44.5 47.9] [44.5 47.2] [44.5 46.5] [44.5 45.8] [44.5 45.1] [44.5 44.4] [44.5 43.7] [44.5 43] [44.5 42.3] [44.5 41.6] [44.5 40.9] [44.5 40.2] [44.5 39.5] [44.5 38.8] [44.5 38.1] [44.5 37.4] [44.5 36.7] [44.5 36]
    [47.5 49.3] [47.5 48.6] [47.5 47.9] [47.5 47.2] [47.5 46.5] [47.5 45.8] [47.5 45.1] [47.5 44.4] [47.5 43.7] [47.5 43] [47.5 42.3] [47.5 41.6] [47.5 40.9] [47.5 40.2] [47.5 39.5] [47.5 38.8] [47.5 38.1] [47.5 37.4] [47.5 36.7] [47.5 36]
    [48.2 49.3] [48.2 48.6] [48.2 47.9] [48.2 47.2] [48.2 46.5] [48.2 45.8] [48.2 45.1] [48.2 44.4] [48.2 43.7] [48.2 43] [48.2 42.3] [48.2 41.6] [48.2 40.9] [48.2 40.2] [48.2 39.5] [48.2 38.8] [48.2 38.1] [48.2 37.4] [48.2 36.7] [48.2 36]
    [51.2 49.3] [51.2 48.6] [51.2 47.9] [51.2 47.2] [51.2 46.5] [51.2 45.8] [51.2 45.1] [51.2 44.4] [51.2 43.7] [51.2 43] [51.2 42.3] [51.2 41.6] [51.2 40.9] [51.2 40.2] [51.2 39.5] [51.2 38.8] [51.2 38.1] [51.2 37.4] [51.2 36.7] [51.2 36]
    [51.9 49.3] [51.9 48.6] [51.9 47.9] [51.9 47.2] [51.9 46.5] [51.9 45.8] [51.9 45.1] [51.9 44.4] [51.9 43.7] [51.9 43] [51.9 42.3] [51.9 41.6] [51.9 40.9] [51.9 40.2] [51.9 39.5] [51.9 38.8] [51.9 38.1] [51.9 37.4] [51.9 36.7] [51.9 36]
    [54.9 49.3] [54.9 48.6] [54.9 47.9] [54.9 47.2] [54.9 46.5] [54.9 45.8] [54.9 45.1] [54.9 44.4] [54.9 43.7] [54.9 43] [54.9 42.3] [54.9 41.6] [54.9 40.9] [54.9 40.2] [54.9 39.5] [54.9 38.8] [54.9 38.1] [54.9 37.4] [54.9 36.7] [54.9 36]
    [55.6 49.3] [55.6 48.6] [55.6 47.9] [55.6 47.2] [55.6 46.5] [55.6 45.8] [55.6 45.1] [55.6 44.4] [55.6 43.7] [55.6 43] [55.6 42.3] [55.6 41.6] [55.6 40.9] [55.6 40.2] [55.6 39.5] [55.6 38.8] [55.6 38.1] [55.6 37.4] [55.6 36.7] [55.6 36]
    [58.6 49.3] [58.6 48.6] [58.6 47.9] [58.6 47.2] [58.6 46.5] [58.6 45.8] [58.6 45.1] [58.6 44.4] [58.6 43.7] [58.6 43] [58.6 42.3] [58.6 41.6] [58.6 40.9] [58.6 40.2] [58.6 39.5] [58.6 38.8] [58.6 38.1] [58.6 37.4] [58.6 36.7] [58.6 36]
    [59.3 49.3] [59.3 48.6] [59.3 47.9] [59.3 47.2] [59.3 46.5] [59.3 45.8] [59.3 45.1] [59.3 44.4] [59.3 43.7] [59.3 43] [59.3 42.3] [59.3 41.6] [59.3 40.9] [59.3 40.2] [59.3 39.5] [59.3 38.8] [59.3 38.1] [59.3 37.4] [59.3 36.7] [59.3 36]
    [127 30] [126.3 30] [125.6 30] [124.9 30] [124.2 30] [123.5 30] [122.8 30] [122.1 30] [121.4 30] [120.7 30] [120 30] [119.3 30] [118.6 30] [117.9 30] [117.2 30] [116.5 30] [115.8 30] [115.1 30] [114.4 30] [113.7 30]
    [127 30.7] [126.3 30.7] [125.6 30.7] [124.9 30.7] [124.2 30.7] [123.5 30.7] [122.8 30.7] [122.1 30.7] [121.4 30.7] [120.7 30.7] [120 30.7] [119.3 30.7] [118.6 30.7] [117.9 30.7] [117.2 30.7] [116.5 30.7] [115.8 30.7] [115.1 30.7] [114.4 30.7] [113.7 30.7]
    [127 27] [126.3 27] [125.6 27] [124.9 27] [124.2 27] [123.5 27] [122.8 27] [122.1 27] [121.4 27] [120.7 27] [120 27] [119.3 27] [118.6 27] [117.9 27] [117.2 27] [116.5 27] [115.8 27] [115.1 27] [114.4 27] [113.7 27]
    [127 26.3] [126.3 26.3] [125.6 26.3] [124.9 26.3] [124.2 26.3] [123.5 26.3] [122.8 26.3] [122.1 26.3] [121.4 26.3] [120.7 26.3] [120 26.3] [119.3 26.3] [118.6 26.3] [117.9 26.3] [117.2 26.3] [116.5 26.3] [115.8 26.3] [115.1 26.3] [114.4 26.3] [113.7 26.3]
    [127 23.3] [126.3 23.3] [125.6 23.3] [124.9 23.3] [124.2 23.3] [123.5 23.3] [122.8 23.3] [122.1 23.3] [121.4 23.3] [120.7 23.3] [120 23.3] [119.3 23.3] [118.6 23.3] [117.9 23.3] [117.2 23.3] [116.5 23.3] [115.8 23.3] [115.1 23.3] [114.4 23.3] [113.7 23.3]
    [127 22.6] [126.3 22.6] [125.6 22.6] [124.9 22.6] [124.2 22.6] [123.5 22.6] [122.8 22.6] [122.1 22.6] [121.4 22.6] [120.7 22.6] [120 22.6] [119.3 22.6] [118.6 22.6] [117.9 22.6] [117.2 22.6] [116.5 22.6] [115.8 22.6] [115.1 22.6] [114.4 22.6] [113.7 22.6]
  ]
end

to draw-borders
  ask patches [
    if count neighbors < 8 [
      set pcolor grey
      ask neighbors [
        set pcolor grey
      ]
    ]

  ]
end

to draw-entrance
  create-turtles 1 [
    set shape "entrance"
    set size 13
    set xcor 56.6
    set ycor 7
    set color white
    ask patches with [pycor <= 12 and pycor >= 2 and pxcor >= 49 and pxcor <= 63] [
      set pcolor blue
    ]
  ]
end

to draw-gates
  set-default-shape gates "flight-departure-gate"
  foreach gates_positions [
    create-gates 1 [
      set color white
      set xcor item 0 ?
      set ycor item 1 ?
      set is-open? false
      set is-gate-open? is-open?
      ask patch-here [
        set pcolor red
        ask neighbors [
          if pcolor != grey [
            set pcolor red
          ]
        ]
      ]
    ]
  ]
end

to draw-restaurants
  set-default-shape restaurants "restaurant"
  create-restaurants 1 [
    set size 6
    set xcor 12
    set ycor 45
    ask patches with [pycor <= 54 and pycor >= 37 and pxcor >= 2 and pxcor <= 23] [
      set pcolor 43
    ]
    ask patch-here [set pcolor 43]
    set color blue
    set is-open? true
  ]
  create-restaurants 1 [
    set size 4
    set xcor 128
    set ycor 11
    set color blue
    ask patch-here [
      set pcolor 43
      ask neighbors [
        set pcolor 43
        ask neighbors [
          set pcolor 43
        ]
      ]
    ]
    set is-open? true
  ]
end

to draw-pillars
  foreach pillars_positions [
    ask patches with [pxcor = item 0 ? and pycor = item 1 ?] [
      set pcolor grey
      ask neighbors [
        set pcolor grey
      ]
    ]
  ]
end

to draw-toilets
  create-toilets 1 [
    set shape "toilet"
    set xcor 77
    set ycor 48
    set size 7
    set color white
    ask patch-here [
      set pcolor grey
    ]
    ask patches with [pycor <= 54 and pycor >= 43 and pxcor >= 70 and pxcor <= 84] [
      set pcolor 123
    ]
    set is-open? true
  ]
end

to close-toilets
  ask toilets [
    set is-open? false
  ]
end

to draw-information-desks
  foreach information_desks_positions [
    create-turtles 1 [
      set shape "information"
      set size 3
      set color blue
      set xcor item 0 ?
      set ycor item 1 ?
    ]
  ]
end

to draw-seats
  set-default-shape seats "seat"
  foreach seats_positions_1 [
    create-seats 1 [
      setxy item 0 ? item 1 ?
      set size 3
      set color 84
      set is-occupied? false
      set seated_passenger nobody
    ]
  ]
end

to setup-environment
  clear-all
  reset-ticks
  ask patches [
    set pcolor black
  ]
  init-staff
  draw-scenario
  create-people
end

to init-staff
  set n_o_s 0
end

to create-people
  init-passengers
  reset-staff
end

to init-passengers
  create-passengers number_of_passengers [
    hide-turtle
    set gender "M"
    set color blue
    set age_group "?"
    set commuter? false
    set group "?"
    set parent? false
    set in_a_hurry? false
    set nationality_cluster "?"
    set shape "person"
    set size 1.5
    set original_size size
    set goal "to arrive"
    set hope true
    set frustration_level 0.0
    set old_frustration_level 0.0
    set intention "to enjoy the trip"
    set internal_threshold (random 5 / 100 )
    set internal_threshold internal_threshold + (random 5 / 100 * -1)
    set action ""
    set seated? false
    set pseat -1
    setxy 55 7
    set is-asking-question? false
    set number_of_misbehaviours 0
    set times_yelling 0
    set times_intimidating 0
    set times_using_force 0
  ]
  let nof round ((percentage_of_female * (count passengers)) / 100)
  let noc round ((percentage_of_commuters * (count passengers)) / 100)
  ask n-of nof passengers [
    set gender "F"
    set color pink
  ]
  
  ask n-of noc passengers [
    set commuter? true
    set age_group "adult"
    set shape "person business"
    set goal "to arrive on time"
  ]

  let noym round ((16.91 * (count passengers with [gender = "M" and not commuter?])) / 100)
  let noyf round ((14.95 * (count passengers with [gender = "F" and not commuter?])) / 100)
  let noam round ((5.36 * (count passengers with [gender = "M" and not commuter?])) / 100)
  let noaf round ((4.66 * (count passengers with [gender = "F" and not commuter?])) / 100)
  let noadm round ((62.47 * (count passengers with [gender = "M" and not commuter?])) / 100)
  let noadf round ((60 * (count passengers with [gender = "F" and not commuter?])) / 100)
  let noem round ((15.26 * (count passengers with [gender = "M" and not commuter?])) / 100)
  let noef round ((20.39 * (count passengers with [gender = "F" and not commuter?])) / 100)

  let count_temp count passengers with [gender = "M" and not commuter? and age_group = "?"]
  if noym > count_temp [
    set noym count_temp
  ]
  
  ask n-of noym passengers with [gender = "M" and not commuter? and age_group = "?"] [
    set age_group "young"
    set original_size 1.2
  ]
  
  set count_temp count passengers with [gender = "F" and not commuter? and age_group = "?"]
  
  if noyf > count_temp [
    set noyf count_temp
  ]

  ask n-of noyf passengers with [gender = "F" and not commuter? and age_group = "?"] [
    set age_group "young"
    set original_size 1.2
  ]
  
  set count_temp count passengers with [gender = "M" and not commuter? and age_group = "?"]
  
  if noam > count_temp [
    set noam count_temp
  ]

  ask n-of noam passengers with [gender = "M" and not commuter? and age_group = "?"] [
    set age_group "adolescent"
    set original_size 1.2
  ]
  
  set count_temp count passengers with [gender = "F" and not commuter? and age_group = "?"]
  
  if noaf > count_temp [
    set noaf count_temp
  ]
  
  ask n-of noaf passengers with [gender = "F" and not commuter? and age_group = "?"] [
    set age_group "adolescent"
    set original_size 1.2
  ]
  
  set count_temp count passengers with [gender = "M" and not commuter? and age_group = "?"]
  
  if noadm > count_temp [
    set noadm count_temp
  ]

  ask n-of noadm passengers with [gender = "M" and not commuter? and age_group = "?"] [
    set age_group "adult"
    set original_size 1.5
  ]
  
  set count_temp count passengers with [gender = "F" and not commuter? and age_group = "?"]
  
  if noadf > count_temp [
    set noadf count_temp
  ]

  ask n-of noadf passengers with [gender = "F" and not commuter? and age_group = "?"] [
    set age_group "adult"
    set original_size 1.5
  ]
  
  set count_temp count passengers with [gender = "M" and not commuter? and age_group = "?"]
  
  if noem > count_temp [
    set noem count_temp
  ]

  ask n-of noem passengers with [gender = "M" and not commuter? and age_group = "?"] [
    set age_group "elder"
    set original_size 1.5
  ] 

  ask passengers with [gender = "F" and not commuter? and age_group = "?"] [
    set age_group "elder"
    set original_size 1.5
  ]
  set-groups
  if kids [
    set-parents
  ]
  set-passengers-in-a-hurry
  set-nationalities
end

to set-groups
  let ages_temp ["adolescent" "adult" "elder"]
  ask passengers with [age_group = "young"] [
    let i random 3
    set age_group item i ages_temp
  ]
  
  ask passengers [
    ifelse age_group = "adolescent" 
    [
      set size 1.2
    ]
    [
      set size 1.5
    ]
    ifelse commuter?
    [
      set shape "person business"
    ]
    [
      set shape "person"
    ]
  ]
  let number_passengers count passengers
  let available_people round ((100 - _percentage_people_travelling_alone) / 100 * number_passengers)
  let people_in_group2 floor (_groups_of_2_ratio * available_people / 100)
  let people_in_group3 floor (_groups_of_3_ratio * available_people / 100)
  let people_in_group4 floor (_groups_of_4_ratio * available_people / 100)
  
  let temp2 (people_in_group2 mod 2)
  let temp3 (people_in_group3 mod 3)
  let temp4 (people_in_group4 mod 4)
  
  let groups_of_2 0
  let groups_of_3 0
  let groups_of_4 0
  
  if (people_in_group2 > 0) and (temp2 < people_in_group2) 
  [
    set groups_of_2 (floor (people_in_group2 / 2))
  ]
  
  if (people_in_group3 > 0) and (temp3 < people_in_group3) 
  [
    set groups_of_3 (floor (people_in_group3 / 3))
  ]
  
  if (people_in_group4 > 0) and (temp4 < people_in_group4) 
  [
    set groups_of_4 (floor (people_in_group4 / 4))
  ]
  let group_count 1
  
  let groups_of_2_h 0
  let groups_of_2_c 0
  let groups_of_3_h 0
  let groups_of_3_c 0
  let groups_of_4_h 0
  let groups_of_4_c 0
  
  ifelse groups_evenly_divided?
  [
    set groups_of_2_h 20
    set groups_of_2_c 21
    set groups_of_3_h 13
    set groups_of_3_c 14
    set groups_of_4_h 10
    set groups_of_4_c 9
  ]
  [
    set groups_of_2_h 5
    set groups_of_2_c 6
    set groups_of_3_h 4
    set groups_of_3_c 5
    set groups_of_4_h 25
    set groups_of_4_c 24
  ]
  
  let go2 0
  let go3 0
  let go4 0
  
  repeat groups_of_2_h [
    ask n-of 2 passengers with [not commuter? and group = "?"] [
      set group group_count
    ]
    set group_count (group_count + 1)
    set go2 (go2 + 1)
  ]
  
  repeat groups_of_2_c [
    ask n-of 2 passengers with [commuter? and group = "?"] [
      set group group_count
    ]
    set group_count (group_count + 1)
    set go2 (go2 + 1)
  ]
  
  repeat groups_of_3_h [
    ask n-of 3 passengers with [not commuter? and group = "?"] [
      set group group_count
    ]
    set group_count (group_count + 1)
    set go3 (go3 + 1)
  ]
  
  repeat groups_of_3_c [
    ask n-of 3 passengers with [commuter? and group = "?"] [
      set group group_count
    ]
    set group_count (group_count + 1)
    set go3 (go3 + 1)
  ]
  
  repeat groups_of_4_h [
    ask n-of 4 passengers with [not commuter? and group = "?"] [
      set group group_count
    ]
    set group_count (group_count + 1)
    set go4 (go4 + 1)
  ]
  
  repeat groups_of_4_c [
    ask n-of 4 passengers with [commuter? and group = "?"] [
      set group group_count
    ]
    set group_count (group_count + 1)
    set go4 (go4 + 1)
  ]
end

to set-passengers-in-a-hurry
  let piah_ideal round ((passengers_in_a_hurry / 100) * count passengers)
  let current_piah 0
  while [piah_ideal > current_piah]
  [
    ask n-of 1 passengers with [not in_a_hurry?] [
      set in_a_hurry? true
      set current_piah (current_piah + 1)
      if group != "?" [
        let g group
        ask passengers with [group = g and not in_a_hurry?] [
          set in_a_hurry? true
          set current_piah (current_piah + 1)
        ]
      ]
    ]
  ]

end

to set-parents
  let groups_of_tourists []
  let groups_of_commuters [] 
  ask passengers with [not commuter? and group != "?"] [
    if empty? groups_of_tourists or not member? group groups_of_tourists [
      set groups_of_tourists lput group groups_of_tourists
    ]
  ]
  ask passengers with [commuter? and group != "?"] [
    if empty? groups_of_commuters or not member? group groups_of_commuters [
      set groups_of_commuters lput group groups_of_commuters
    ]
  ]
  set groups_of_tourists sort groups_of_tourists
  foreach groups_of_tourists [
    let choice random 2
    let group_type count passengers with [group = ?]
    if choice = 1 and count passengers with [group = ? and (age_group = "adult" or age_group = "elder")] > 0 [
      ask n-of 1 passengers with [group = ? and (age_group = "adult" or age_group = "elder")] [
        set parent? true
      ]
      if group_type > 2 and count passengers with [group = ? and (age_group = "adult" or age_group = "elder") and not parent?] > 0[
        ask n-of 1 passengers with [group = ? and (age_group = "adult" or age_group = "elder") and not parent?] [
          set parent? true
        ]
      ]
      ask passengers with [group = ? and not parent?] [
        set age_group "young"
        set original_size 0.8
        set goal "just to travel"
      ]
    ]
  ] 
end

to set-nationalities
  let clusters ["arab" "near east" "latin america" "east europe" "latin europe" "nordic" "germanic" "african" "anglo" "confucian" "far east"]
  let clusters_distribution (list arab_distribution near_east_distribution latin_america_distribution east_europe_distribution
    latin_europe_distribution nordic_distribution germanic_distribution african_distribution anglo_distribution confucian_distribution far_east_distribution)
  
  ifelse everybody_from_latin_europe?
  [
    set arab_distribution 0
    set near_east_distribution 0
    set latin_america_distribution 0
    set east_europe_distribution 0
    set latin_europe_distribution 100
    set nordic_distribution 0
    set germanic_distribution 0
    set african_distribution 0
    set anglo_distribution 0
    set confucian_distribution 0
    set far_east_distribution 0
  ]
  [
    set arab_distribution 9.09
    set near_east_distribution 9.09
    set latin_america_distribution 9.09
    set east_europe_distribution 9.09
    set latin_europe_distribution 9.09
    set nordic_distribution 9.09
    set germanic_distribution 9.09
    set african_distribution 9.09
    set anglo_distribution 9.09
    set confucian_distribution 9.09
    set far_east_distribution 9.09
  ]
  
  let dt (arab_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "arab"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "arab"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
  
  set dt (near_east_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "near east"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "near east"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
  
  set dt (latin_america_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "latin america"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "latin america"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
  
  set dt (east_europe_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "east europe"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "east europe"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
  
  set dt (latin_europe_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "latin europe"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "latin europe"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
  
  set dt (nordic_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "nordic"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "nordic"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
  
  set dt (germanic_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "germanic"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "germanic"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
  
  set dt (african_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "african"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "african"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
  
  set dt (anglo_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "anglo"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "anglo"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
  
  set dt (confucian_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "confucian"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "confucian"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
  
  set dt (far_east_distribution / 100) * count passengers
  while [(count passengers with [nationality_cluster = "far east"] < dt) and count passengers with [nationality_cluster = "?"] > 0 ] [
    ask n-of 1 passengers with [nationality_cluster = "?"] [
      set nationality_cluster "far east"
      if group != "?" [
        let g group
        let n nationality_cluster
        ask passengers with [group = g] [
          set nationality_cluster n
        ]
      ]
    ]
  ]
end

to reset-staff
  if n_o_s != number_of_staff [
    set n_o_s number_of_staff
    ask staff_members [ die ]
    let staff_members_initial_positions [[31 3] [38 3] [22 29] [31 29] [46 20] [41 29] [46 10] [15 29] [8 29]]

    let i 0
    set-default-shape staff_members "person service"
    repeat number_of_staff [
      create-staff_members 1 [
        set color orange
        set xcor item 0 (item i staff_members_initial_positions)
        set ycor item 1 (item i staff_members_initial_positions)
        set size 1.5
      ]
      set i i + 1
    ]
  ]
end